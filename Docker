1. Docker
docker intro https://docs.docker.com/get-started/docker-overview/ 

Images
An image is a read-only template with instructions for creating a Docker container.

A container image is a standardized package that includes all of the files, binaries, libraries, and configurations to run a container.

For a PostgreSQL image, that image will package the database binaries, config files, and other dependencies. For a Python web app,
it'll include the Python runtime, your app code, and all of its dependencies.


There are two important principles of images:
Images are immutable. Once an image is created, it can't be modified. You can only make a new image or add changes on top of it.
Container images are composed of layers. Each layer represents a set of file system changes that add, remove, or modify files.



Container 
A container is a runnable instance of an image. You can create, start, stop, move, or delete a container using the Docker API or CLI. 
You can connect a container to one or more networks, attach storage to it, or even create a new image based on its current state.

Containers are: https://docs.docker.com/get-started/docker-concepts/the-basics/what-is-a-container/
Self-contained. Each container has everything it needs to function with no reliance on any pre-installed dependencies on the host machine.
Isolated. Since containers are run in isolation, they have minimal influence on the host and other containers, increasing the security of your applications.
Independent. Each container is independently managed. Deleting one container won't affect any others.
Portable. Containers can run anywhere! The container that runs on your development machine will work the same way in a data center or anywhere in the cloud!

Containers versus virtual machines (VMs)
Without getting too deep, a VM is an entire operating system with its own kernel, hardware drivers, programs, and applications. Spinning up a VM only to
isolate a single application is a lot of overhead.

A container is simply an isolated process with all of the files it needs to run. If you run multiple containers, they all share the same kernel, 
allowing you to run more applications on less infrastructure.


Image registry  https://docs.docker.com/get-started/docker-concepts/the-basics/what-is-a-registry/
An image registry is a centralized location for storing and sharing your container images. It can be either public or private. Docker Hub is a public
registry that anyone can use and is the default registry.

A registry is a centralized location that stores and manages container images, whereas a repository is a collection of related container images within a 
registry. Think of it as a folder where you organize your images based on projects. Each repository contains one or more container images.


container images are composed of layers. And each of these layers, once created, are immutable. But, what does that actually mean? And how are those
layers used to create the filesystem a container can use?

Image layers https://docs.docker.com/get-started/docker-concepts/building-images/understanding-image-layers/
Each layer in an image contains a set of filesystem changes - additions, deletions, or modifications. Let‚Äôs look at a theoretical image:

The first layer adds basic commands and a package manager, such as apt.
The second layer installs a Python runtime and pip for dependency management.
The third layer copies in an application‚Äôs specific requirements.txt file.
The fourth layer installs that application‚Äôs specific dependencies.
The fifth layer copies in the actual source code of the application.


Commonly used orders:

## üõ† **Image Management**

| Action                             | Command                         | Example                          |
| ---------------------------------- | ------------------------------- | -------------------------------- |
| **List images**                    | `docker images`                 | `docker images`                  |
| **Pull image from registry**       | `docker pull <image>`           | `docker pull python:3.10`        |
| **Build image**                    | `docker build -t <name> .`      | `docker build -t myapp .`        |
| **Remove image**                   | `docker rmi <image>`            | `docker rmi python:3.10`         |
| **Save image to tar**              | `docker save <image> -o <file>` | `docker save myapp -o myapp.tar` |
| **Load image from tar**            | `docker load -i <file>`         | `docker load -i myapp.tar`       |
| **Load image from tar (redirect)** | `docker load < file.tar`        | `docker load < generator.tar`    |

---

## üì¶ **Container Management**

| Action                                 | Command                            | Example                               |
| -------------------------------------- | ---------------------------------- | ------------------------------------- |
| **Run container**                      | `docker run <image>`               | `docker run -it python:3.10`          |
| **Run with port mapping**              | `docker run -p <host>:<container>` | `docker run -p 8080:80 nginx`         |
| **Run in background**                  | `docker run -d <image>`            | `docker run -d nginx`                 |
| **Run with volume**                    | `docker run -v <host>:<container>` | `docker run -v /data:/app/data myapp` |
| **List running containers**            | `docker ps`                        | `docker ps`                           |
| **List all containers**                | `docker ps -a`                     | `docker ps -a`                        |
| **Start container**                    | `docker start <name>`              | `docker start generator`              |
| **Start container and attach to logs** | `docker start -a <name>`           | `docker start -a generator`           |
| **Stop container**                     | `docker stop <name>`               | `docker stop generator`               |
| **Restart container**                  | `docker restart <name>`            | `docker restart generator`            |
| **Remove container**                   | `docker rm <name>`                 | `docker rm generator`                 |

---

## üîç **Inspect & Logs**

| Action                       | Command                            | Example                               |
| ---------------------------- | ---------------------------------- | ------------------------------------- |
| **View logs**                | `docker logs <name>`               | `docker logs generator`               |
| **Follow logs in real-time** | `docker logs -f <name>`            | `docker logs -f generator`            |
| **Inspect details**          | `docker inspect <name>`            | `docker inspect generator`            |
| **Access container shell**   | `docker exec -it <name> /bin/bash` | `docker exec -it generator /bin/bash` |

---

## üìÇ **Volumes & Networks**

| Action                           | Command                                    | Example |
| -------------------------------- | ------------------------------------------ | ------- |
| **List volumes**                 | `docker volume ls`                         | ‚Äî       |
| **Remove volume**                | `docker volume rm <name>`                  | ‚Äî       |
| **List networks**                | `docker network ls`                        | ‚Äî       |
| **Create network**               | `docker network create <name>`             | ‚Äî       |
| **Connect container to network** | `docker network connect <net> <container>` | ‚Äî       |

---

## üßπ **Cleanup**

| Action                        | Command                  |
| ----------------------------- | ------------------------ |
| Remove all stopped containers | `docker container prune` |
| Remove unused images          | `docker image prune`     |
| Remove unused networks        | `docker network prune`   |
| Remove everything unused      | `docker system prune`    |





